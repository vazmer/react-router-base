
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Password` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Password
 * 
 */
export type PasswordModel = runtime.Types.Result.DefaultSelection<Prisma.$PasswordPayload>

export type AggregatePassword = {
  _count: PasswordCountAggregateOutputType | null
  _min: PasswordMinAggregateOutputType | null
  _max: PasswordMaxAggregateOutputType | null
}

export type PasswordMinAggregateOutputType = {
  hash: string | null
  userId: string | null
  requiredReset: boolean | null
}

export type PasswordMaxAggregateOutputType = {
  hash: string | null
  userId: string | null
  requiredReset: boolean | null
}

export type PasswordCountAggregateOutputType = {
  hash: number
  userId: number
  requiredReset: number
  _all: number
}


export type PasswordMinAggregateInputType = {
  hash?: true
  userId?: true
  requiredReset?: true
}

export type PasswordMaxAggregateInputType = {
  hash?: true
  userId?: true
  requiredReset?: true
}

export type PasswordCountAggregateInputType = {
  hash?: true
  userId?: true
  requiredReset?: true
  _all?: true
}

export type PasswordAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Password to aggregate.
   */
  where?: Prisma.PasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Passwords to fetch.
   */
  orderBy?: Prisma.PasswordOrderByWithRelationInput | Prisma.PasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Passwords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Passwords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Passwords
  **/
  _count?: true | PasswordCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PasswordMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PasswordMaxAggregateInputType
}

export type GetPasswordAggregateType<T extends PasswordAggregateArgs> = {
      [P in keyof T & keyof AggregatePassword]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePassword[P]>
    : Prisma.GetScalarType<T[P], AggregatePassword[P]>
}




export type PasswordGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PasswordWhereInput
  orderBy?: Prisma.PasswordOrderByWithAggregationInput | Prisma.PasswordOrderByWithAggregationInput[]
  by: Prisma.PasswordScalarFieldEnum[] | Prisma.PasswordScalarFieldEnum
  having?: Prisma.PasswordScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PasswordCountAggregateInputType | true
  _min?: PasswordMinAggregateInputType
  _max?: PasswordMaxAggregateInputType
}

export type PasswordGroupByOutputType = {
  hash: string
  userId: string
  requiredReset: boolean
  _count: PasswordCountAggregateOutputType | null
  _min: PasswordMinAggregateOutputType | null
  _max: PasswordMaxAggregateOutputType | null
}

type GetPasswordGroupByPayload<T extends PasswordGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PasswordGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PasswordGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PasswordGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PasswordGroupByOutputType[P]>
      }
    >
  > 



export type PasswordWhereInput = {
  AND?: Prisma.PasswordWhereInput | Prisma.PasswordWhereInput[]
  OR?: Prisma.PasswordWhereInput[]
  NOT?: Prisma.PasswordWhereInput | Prisma.PasswordWhereInput[]
  hash?: Prisma.StringFilter<"Password"> | string
  userId?: Prisma.StringFilter<"Password"> | string
  requiredReset?: Prisma.BoolFilter<"Password"> | boolean
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type PasswordOrderByWithRelationInput = {
  hash?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  requiredReset?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type PasswordWhereUniqueInput = Prisma.AtLeast<{
  userId?: string
  AND?: Prisma.PasswordWhereInput | Prisma.PasswordWhereInput[]
  OR?: Prisma.PasswordWhereInput[]
  NOT?: Prisma.PasswordWhereInput | Prisma.PasswordWhereInput[]
  hash?: Prisma.StringFilter<"Password"> | string
  requiredReset?: Prisma.BoolFilter<"Password"> | boolean
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "userId">

export type PasswordOrderByWithAggregationInput = {
  hash?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  requiredReset?: Prisma.SortOrder
  _count?: Prisma.PasswordCountOrderByAggregateInput
  _max?: Prisma.PasswordMaxOrderByAggregateInput
  _min?: Prisma.PasswordMinOrderByAggregateInput
}

export type PasswordScalarWhereWithAggregatesInput = {
  AND?: Prisma.PasswordScalarWhereWithAggregatesInput | Prisma.PasswordScalarWhereWithAggregatesInput[]
  OR?: Prisma.PasswordScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PasswordScalarWhereWithAggregatesInput | Prisma.PasswordScalarWhereWithAggregatesInput[]
  hash?: Prisma.StringWithAggregatesFilter<"Password"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Password"> | string
  requiredReset?: Prisma.BoolWithAggregatesFilter<"Password"> | boolean
}

export type PasswordCreateInput = {
  hash: string
  requiredReset?: boolean
  user: Prisma.UserCreateNestedOneWithoutPasswordInput
}

export type PasswordUncheckedCreateInput = {
  hash: string
  userId: string
  requiredReset?: boolean
}

export type PasswordUpdateInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  requiredReset?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutPasswordNestedInput
}

export type PasswordUncheckedUpdateInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  requiredReset?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordCreateManyInput = {
  hash: string
  userId: string
  requiredReset?: boolean
}

export type PasswordUpdateManyMutationInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  requiredReset?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordUncheckedUpdateManyInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  requiredReset?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordNullableScalarRelationFilter = {
  is?: Prisma.PasswordWhereInput | null
  isNot?: Prisma.PasswordWhereInput | null
}

export type PasswordCountOrderByAggregateInput = {
  hash?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  requiredReset?: Prisma.SortOrder
}

export type PasswordMaxOrderByAggregateInput = {
  hash?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  requiredReset?: Prisma.SortOrder
}

export type PasswordMinOrderByAggregateInput = {
  hash?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  requiredReset?: Prisma.SortOrder
}

export type PasswordCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PasswordCreateWithoutUserInput, Prisma.PasswordUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.PasswordCreateOrConnectWithoutUserInput
  connect?: Prisma.PasswordWhereUniqueInput
}

export type PasswordUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PasswordCreateWithoutUserInput, Prisma.PasswordUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.PasswordCreateOrConnectWithoutUserInput
  connect?: Prisma.PasswordWhereUniqueInput
}

export type PasswordUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PasswordCreateWithoutUserInput, Prisma.PasswordUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.PasswordCreateOrConnectWithoutUserInput
  upsert?: Prisma.PasswordUpsertWithoutUserInput
  disconnect?: Prisma.PasswordWhereInput | boolean
  delete?: Prisma.PasswordWhereInput | boolean
  connect?: Prisma.PasswordWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PasswordUpdateToOneWithWhereWithoutUserInput, Prisma.PasswordUpdateWithoutUserInput>, Prisma.PasswordUncheckedUpdateWithoutUserInput>
}

export type PasswordUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PasswordCreateWithoutUserInput, Prisma.PasswordUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.PasswordCreateOrConnectWithoutUserInput
  upsert?: Prisma.PasswordUpsertWithoutUserInput
  disconnect?: Prisma.PasswordWhereInput | boolean
  delete?: Prisma.PasswordWhereInput | boolean
  connect?: Prisma.PasswordWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PasswordUpdateToOneWithWhereWithoutUserInput, Prisma.PasswordUpdateWithoutUserInput>, Prisma.PasswordUncheckedUpdateWithoutUserInput>
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type PasswordCreateWithoutUserInput = {
  hash: string
  requiredReset?: boolean
}

export type PasswordUncheckedCreateWithoutUserInput = {
  hash: string
  requiredReset?: boolean
}

export type PasswordCreateOrConnectWithoutUserInput = {
  where: Prisma.PasswordWhereUniqueInput
  create: Prisma.XOR<Prisma.PasswordCreateWithoutUserInput, Prisma.PasswordUncheckedCreateWithoutUserInput>
}

export type PasswordUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.PasswordUpdateWithoutUserInput, Prisma.PasswordUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PasswordCreateWithoutUserInput, Prisma.PasswordUncheckedCreateWithoutUserInput>
  where?: Prisma.PasswordWhereInput
}

export type PasswordUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.PasswordWhereInput
  data: Prisma.XOR<Prisma.PasswordUpdateWithoutUserInput, Prisma.PasswordUncheckedUpdateWithoutUserInput>
}

export type PasswordUpdateWithoutUserInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  requiredReset?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordUncheckedUpdateWithoutUserInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string
  requiredReset?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type PasswordSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  hash?: boolean
  userId?: boolean
  requiredReset?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["password"]>

export type PasswordSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  hash?: boolean
  userId?: boolean
  requiredReset?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["password"]>

export type PasswordSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  hash?: boolean
  userId?: boolean
  requiredReset?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["password"]>

export type PasswordSelectScalar = {
  hash?: boolean
  userId?: boolean
  requiredReset?: boolean
}

export type PasswordOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"hash" | "userId" | "requiredReset", ExtArgs["result"]["password"]>
export type PasswordInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PasswordIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PasswordIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PasswordPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Password"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    hash: string
    userId: string
    requiredReset: boolean
  }, ExtArgs["result"]["password"]>
  composites: {}
}

export type PasswordGetPayload<S extends boolean | null | undefined | PasswordDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PasswordPayload, S>

export type PasswordCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PasswordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PasswordCountAggregateInputType | true
  }

export interface PasswordDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Password'], meta: { name: 'Password' } }
  /**
   * Find zero or one Password that matches the filter.
   * @param {PasswordFindUniqueArgs} args - Arguments to find a Password
   * @example
   * // Get one Password
   * const password = await prisma.password.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PasswordFindUniqueArgs>(args: Prisma.SelectSubset<T, PasswordFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PasswordClient<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Password that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PasswordFindUniqueOrThrowArgs} args - Arguments to find a Password
   * @example
   * // Get one Password
   * const password = await prisma.password.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PasswordFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PasswordFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PasswordClient<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Password that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordFindFirstArgs} args - Arguments to find a Password
   * @example
   * // Get one Password
   * const password = await prisma.password.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PasswordFindFirstArgs>(args?: Prisma.SelectSubset<T, PasswordFindFirstArgs<ExtArgs>>): Prisma.Prisma__PasswordClient<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Password that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordFindFirstOrThrowArgs} args - Arguments to find a Password
   * @example
   * // Get one Password
   * const password = await prisma.password.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PasswordFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PasswordFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PasswordClient<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Passwords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Passwords
   * const passwords = await prisma.password.findMany()
   * 
   * // Get first 10 Passwords
   * const passwords = await prisma.password.findMany({ take: 10 })
   * 
   * // Only select the `hash`
   * const passwordWithHashOnly = await prisma.password.findMany({ select: { hash: true } })
   * 
   */
  findMany<T extends PasswordFindManyArgs>(args?: Prisma.SelectSubset<T, PasswordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Password.
   * @param {PasswordCreateArgs} args - Arguments to create a Password.
   * @example
   * // Create one Password
   * const Password = await prisma.password.create({
   *   data: {
   *     // ... data to create a Password
   *   }
   * })
   * 
   */
  create<T extends PasswordCreateArgs>(args: Prisma.SelectSubset<T, PasswordCreateArgs<ExtArgs>>): Prisma.Prisma__PasswordClient<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Passwords.
   * @param {PasswordCreateManyArgs} args - Arguments to create many Passwords.
   * @example
   * // Create many Passwords
   * const password = await prisma.password.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PasswordCreateManyArgs>(args?: Prisma.SelectSubset<T, PasswordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Passwords and returns the data saved in the database.
   * @param {PasswordCreateManyAndReturnArgs} args - Arguments to create many Passwords.
   * @example
   * // Create many Passwords
   * const password = await prisma.password.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Passwords and only return the `hash`
   * const passwordWithHashOnly = await prisma.password.createManyAndReturn({
   *   select: { hash: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PasswordCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PasswordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Password.
   * @param {PasswordDeleteArgs} args - Arguments to delete one Password.
   * @example
   * // Delete one Password
   * const Password = await prisma.password.delete({
   *   where: {
   *     // ... filter to delete one Password
   *   }
   * })
   * 
   */
  delete<T extends PasswordDeleteArgs>(args: Prisma.SelectSubset<T, PasswordDeleteArgs<ExtArgs>>): Prisma.Prisma__PasswordClient<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Password.
   * @param {PasswordUpdateArgs} args - Arguments to update one Password.
   * @example
   * // Update one Password
   * const password = await prisma.password.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PasswordUpdateArgs>(args: Prisma.SelectSubset<T, PasswordUpdateArgs<ExtArgs>>): Prisma.Prisma__PasswordClient<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Passwords.
   * @param {PasswordDeleteManyArgs} args - Arguments to filter Passwords to delete.
   * @example
   * // Delete a few Passwords
   * const { count } = await prisma.password.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PasswordDeleteManyArgs>(args?: Prisma.SelectSubset<T, PasswordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Passwords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Passwords
   * const password = await prisma.password.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PasswordUpdateManyArgs>(args: Prisma.SelectSubset<T, PasswordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Passwords and returns the data updated in the database.
   * @param {PasswordUpdateManyAndReturnArgs} args - Arguments to update many Passwords.
   * @example
   * // Update many Passwords
   * const password = await prisma.password.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Passwords and only return the `hash`
   * const passwordWithHashOnly = await prisma.password.updateManyAndReturn({
   *   select: { hash: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PasswordUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PasswordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Password.
   * @param {PasswordUpsertArgs} args - Arguments to update or create a Password.
   * @example
   * // Update or create a Password
   * const password = await prisma.password.upsert({
   *   create: {
   *     // ... data to create a Password
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Password we want to update
   *   }
   * })
   */
  upsert<T extends PasswordUpsertArgs>(args: Prisma.SelectSubset<T, PasswordUpsertArgs<ExtArgs>>): Prisma.Prisma__PasswordClient<runtime.Types.Result.GetResult<Prisma.$PasswordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Passwords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordCountArgs} args - Arguments to filter Passwords to count.
   * @example
   * // Count the number of Passwords
   * const count = await prisma.password.count({
   *   where: {
   *     // ... the filter for the Passwords we want to count
   *   }
   * })
  **/
  count<T extends PasswordCountArgs>(
    args?: Prisma.Subset<T, PasswordCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PasswordCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Password.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PasswordAggregateArgs>(args: Prisma.Subset<T, PasswordAggregateArgs>): Prisma.PrismaPromise<GetPasswordAggregateType<T>>

  /**
   * Group by Password.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PasswordGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PasswordGroupByArgs['orderBy'] }
      : { orderBy?: PasswordGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PasswordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Password model
 */
readonly fields: PasswordFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Password.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PasswordClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Password model
 */
export interface PasswordFieldRefs {
  readonly hash: Prisma.FieldRef<"Password", 'String'>
  readonly userId: Prisma.FieldRef<"Password", 'String'>
  readonly requiredReset: Prisma.FieldRef<"Password", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Password findUnique
 */
export type PasswordFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * Filter, which Password to fetch.
   */
  where: Prisma.PasswordWhereUniqueInput
}

/**
 * Password findUniqueOrThrow
 */
export type PasswordFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * Filter, which Password to fetch.
   */
  where: Prisma.PasswordWhereUniqueInput
}

/**
 * Password findFirst
 */
export type PasswordFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * Filter, which Password to fetch.
   */
  where?: Prisma.PasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Passwords to fetch.
   */
  orderBy?: Prisma.PasswordOrderByWithRelationInput | Prisma.PasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Passwords.
   */
  cursor?: Prisma.PasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Passwords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Passwords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Passwords.
   */
  distinct?: Prisma.PasswordScalarFieldEnum | Prisma.PasswordScalarFieldEnum[]
}

/**
 * Password findFirstOrThrow
 */
export type PasswordFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * Filter, which Password to fetch.
   */
  where?: Prisma.PasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Passwords to fetch.
   */
  orderBy?: Prisma.PasswordOrderByWithRelationInput | Prisma.PasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Passwords.
   */
  cursor?: Prisma.PasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Passwords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Passwords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Passwords.
   */
  distinct?: Prisma.PasswordScalarFieldEnum | Prisma.PasswordScalarFieldEnum[]
}

/**
 * Password findMany
 */
export type PasswordFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * Filter, which Passwords to fetch.
   */
  where?: Prisma.PasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Passwords to fetch.
   */
  orderBy?: Prisma.PasswordOrderByWithRelationInput | Prisma.PasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Passwords.
   */
  cursor?: Prisma.PasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Passwords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Passwords.
   */
  skip?: number
  distinct?: Prisma.PasswordScalarFieldEnum | Prisma.PasswordScalarFieldEnum[]
}

/**
 * Password create
 */
export type PasswordCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * The data needed to create a Password.
   */
  data: Prisma.XOR<Prisma.PasswordCreateInput, Prisma.PasswordUncheckedCreateInput>
}

/**
 * Password createMany
 */
export type PasswordCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Passwords.
   */
  data: Prisma.PasswordCreateManyInput | Prisma.PasswordCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Password createManyAndReturn
 */
export type PasswordCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * The data used to create many Passwords.
   */
  data: Prisma.PasswordCreateManyInput | Prisma.PasswordCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Password update
 */
export type PasswordUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * The data needed to update a Password.
   */
  data: Prisma.XOR<Prisma.PasswordUpdateInput, Prisma.PasswordUncheckedUpdateInput>
  /**
   * Choose, which Password to update.
   */
  where: Prisma.PasswordWhereUniqueInput
}

/**
 * Password updateMany
 */
export type PasswordUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Passwords.
   */
  data: Prisma.XOR<Prisma.PasswordUpdateManyMutationInput, Prisma.PasswordUncheckedUpdateManyInput>
  /**
   * Filter which Passwords to update
   */
  where?: Prisma.PasswordWhereInput
  /**
   * Limit how many Passwords to update.
   */
  limit?: number
}

/**
 * Password updateManyAndReturn
 */
export type PasswordUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * The data used to update Passwords.
   */
  data: Prisma.XOR<Prisma.PasswordUpdateManyMutationInput, Prisma.PasswordUncheckedUpdateManyInput>
  /**
   * Filter which Passwords to update
   */
  where?: Prisma.PasswordWhereInput
  /**
   * Limit how many Passwords to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Password upsert
 */
export type PasswordUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * The filter to search for the Password to update in case it exists.
   */
  where: Prisma.PasswordWhereUniqueInput
  /**
   * In case the Password found by the `where` argument doesn't exist, create a new Password with this data.
   */
  create: Prisma.XOR<Prisma.PasswordCreateInput, Prisma.PasswordUncheckedCreateInput>
  /**
   * In case the Password was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PasswordUpdateInput, Prisma.PasswordUncheckedUpdateInput>
}

/**
 * Password delete
 */
export type PasswordDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
  /**
   * Filter which Password to delete.
   */
  where: Prisma.PasswordWhereUniqueInput
}

/**
 * Password deleteMany
 */
export type PasswordDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Passwords to delete
   */
  where?: Prisma.PasswordWhereInput
  /**
   * Limit how many Passwords to delete.
   */
  limit?: number
}

/**
 * Password without action
 */
export type PasswordDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Password
   */
  select?: Prisma.PasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Password
   */
  omit?: Prisma.PasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordInclude<ExtArgs> | null
}
