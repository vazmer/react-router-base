
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserImage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserImage
 * 
 */
export type UserImageModel = runtime.Types.Result.DefaultSelection<Prisma.$UserImagePayload>

export type AggregateUserImage = {
  _count: UserImageCountAggregateOutputType | null
  _min: UserImageMinAggregateOutputType | null
  _max: UserImageMaxAggregateOutputType | null
}

export type UserImageMinAggregateOutputType = {
  id: string | null
  altText: string | null
  objectKey: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type UserImageMaxAggregateOutputType = {
  id: string | null
  altText: string | null
  objectKey: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type UserImageCountAggregateOutputType = {
  id: number
  altText: number
  objectKey: number
  createdAt: number
  updatedAt: number
  userId: number
  _all: number
}


export type UserImageMinAggregateInputType = {
  id?: true
  altText?: true
  objectKey?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type UserImageMaxAggregateInputType = {
  id?: true
  altText?: true
  objectKey?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type UserImageCountAggregateInputType = {
  id?: true
  altText?: true
  objectKey?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  _all?: true
}

export type UserImageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserImage to aggregate.
   */
  where?: Prisma.UserImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserImages to fetch.
   */
  orderBy?: Prisma.UserImageOrderByWithRelationInput | Prisma.UserImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserImages
  **/
  _count?: true | UserImageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserImageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserImageMaxAggregateInputType
}

export type GetUserImageAggregateType<T extends UserImageAggregateArgs> = {
      [P in keyof T & keyof AggregateUserImage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserImage[P]>
    : Prisma.GetScalarType<T[P], AggregateUserImage[P]>
}




export type UserImageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserImageWhereInput
  orderBy?: Prisma.UserImageOrderByWithAggregationInput | Prisma.UserImageOrderByWithAggregationInput[]
  by: Prisma.UserImageScalarFieldEnum[] | Prisma.UserImageScalarFieldEnum
  having?: Prisma.UserImageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserImageCountAggregateInputType | true
  _min?: UserImageMinAggregateInputType
  _max?: UserImageMaxAggregateInputType
}

export type UserImageGroupByOutputType = {
  id: string
  altText: string | null
  objectKey: string
  createdAt: Date
  updatedAt: Date
  userId: string
  _count: UserImageCountAggregateOutputType | null
  _min: UserImageMinAggregateOutputType | null
  _max: UserImageMaxAggregateOutputType | null
}

type GetUserImageGroupByPayload<T extends UserImageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserImageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserImageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserImageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserImageGroupByOutputType[P]>
      }
    >
  > 



export type UserImageWhereInput = {
  AND?: Prisma.UserImageWhereInput | Prisma.UserImageWhereInput[]
  OR?: Prisma.UserImageWhereInput[]
  NOT?: Prisma.UserImageWhereInput | Prisma.UserImageWhereInput[]
  id?: Prisma.StringFilter<"UserImage"> | string
  altText?: Prisma.StringNullableFilter<"UserImage"> | string | null
  objectKey?: Prisma.StringFilter<"UserImage"> | string
  createdAt?: Prisma.DateTimeFilter<"UserImage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserImage"> | Date | string
  userId?: Prisma.StringFilter<"UserImage"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserImageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  altText?: Prisma.SortOrderInput | Prisma.SortOrder
  objectKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserImageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.UserImageWhereInput | Prisma.UserImageWhereInput[]
  OR?: Prisma.UserImageWhereInput[]
  NOT?: Prisma.UserImageWhereInput | Prisma.UserImageWhereInput[]
  altText?: Prisma.StringNullableFilter<"UserImage"> | string | null
  objectKey?: Prisma.StringFilter<"UserImage"> | string
  createdAt?: Prisma.DateTimeFilter<"UserImage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserImage"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type UserImageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  altText?: Prisma.SortOrderInput | Prisma.SortOrder
  objectKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.UserImageCountOrderByAggregateInput
  _max?: Prisma.UserImageMaxOrderByAggregateInput
  _min?: Prisma.UserImageMinOrderByAggregateInput
}

export type UserImageScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserImageScalarWhereWithAggregatesInput | Prisma.UserImageScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserImageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserImageScalarWhereWithAggregatesInput | Prisma.UserImageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserImage"> | string
  altText?: Prisma.StringNullableWithAggregatesFilter<"UserImage"> | string | null
  objectKey?: Prisma.StringWithAggregatesFilter<"UserImage"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserImage"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserImage"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"UserImage"> | string
}

export type UserImageCreateInput = {
  id?: string
  altText?: string | null
  objectKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutImageInput
}

export type UserImageUncheckedCreateInput = {
  id?: string
  altText?: string | null
  objectKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type UserImageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  altText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutImageNestedInput
}

export type UserImageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  altText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserImageCreateManyInput = {
  id?: string
  altText?: string | null
  objectKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type UserImageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  altText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserImageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  altText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserImageNullableScalarRelationFilter = {
  is?: Prisma.UserImageWhereInput | null
  isNot?: Prisma.UserImageWhereInput | null
}

export type UserImageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  altText?: Prisma.SortOrder
  objectKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserImageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  altText?: Prisma.SortOrder
  objectKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserImageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  altText?: Prisma.SortOrder
  objectKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserImageCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserImageCreateWithoutUserInput, Prisma.UserImageUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserImageCreateOrConnectWithoutUserInput
  connect?: Prisma.UserImageWhereUniqueInput
}

export type UserImageUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserImageCreateWithoutUserInput, Prisma.UserImageUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserImageCreateOrConnectWithoutUserInput
  connect?: Prisma.UserImageWhereUniqueInput
}

export type UserImageUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserImageCreateWithoutUserInput, Prisma.UserImageUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserImageCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserImageUpsertWithoutUserInput
  disconnect?: Prisma.UserImageWhereInput | boolean
  delete?: Prisma.UserImageWhereInput | boolean
  connect?: Prisma.UserImageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserImageUpdateToOneWithWhereWithoutUserInput, Prisma.UserImageUpdateWithoutUserInput>, Prisma.UserImageUncheckedUpdateWithoutUserInput>
}

export type UserImageUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserImageCreateWithoutUserInput, Prisma.UserImageUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserImageCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserImageUpsertWithoutUserInput
  disconnect?: Prisma.UserImageWhereInput | boolean
  delete?: Prisma.UserImageWhereInput | boolean
  connect?: Prisma.UserImageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserImageUpdateToOneWithWhereWithoutUserInput, Prisma.UserImageUpdateWithoutUserInput>, Prisma.UserImageUncheckedUpdateWithoutUserInput>
}

export type UserImageCreateWithoutUserInput = {
  id?: string
  altText?: string | null
  objectKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserImageUncheckedCreateWithoutUserInput = {
  id?: string
  altText?: string | null
  objectKey: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserImageCreateOrConnectWithoutUserInput = {
  where: Prisma.UserImageWhereUniqueInput
  create: Prisma.XOR<Prisma.UserImageCreateWithoutUserInput, Prisma.UserImageUncheckedCreateWithoutUserInput>
}

export type UserImageUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserImageUpdateWithoutUserInput, Prisma.UserImageUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserImageCreateWithoutUserInput, Prisma.UserImageUncheckedCreateWithoutUserInput>
  where?: Prisma.UserImageWhereInput
}

export type UserImageUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserImageWhereInput
  data: Prisma.XOR<Prisma.UserImageUpdateWithoutUserInput, Prisma.UserImageUncheckedUpdateWithoutUserInput>
}

export type UserImageUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  altText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserImageUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  altText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserImageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  altText?: boolean
  objectKey?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userImage"]>

export type UserImageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  altText?: boolean
  objectKey?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userImage"]>

export type UserImageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  altText?: boolean
  objectKey?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userImage"]>

export type UserImageSelectScalar = {
  id?: boolean
  altText?: boolean
  objectKey?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
}

export type UserImageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "altText" | "objectKey" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["userImage"]>
export type UserImageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserImageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserImageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserImagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserImage"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    altText: string | null
    objectKey: string
    createdAt: Date
    updatedAt: Date
    userId: string
  }, ExtArgs["result"]["userImage"]>
  composites: {}
}

export type UserImageGetPayload<S extends boolean | null | undefined | UserImageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserImagePayload, S>

export type UserImageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserImageCountAggregateInputType | true
  }

export interface UserImageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserImage'], meta: { name: 'UserImage' } }
  /**
   * Find zero or one UserImage that matches the filter.
   * @param {UserImageFindUniqueArgs} args - Arguments to find a UserImage
   * @example
   * // Get one UserImage
   * const userImage = await prisma.userImage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserImageFindUniqueArgs>(args: Prisma.SelectSubset<T, UserImageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserImageClient<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserImage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserImageFindUniqueOrThrowArgs} args - Arguments to find a UserImage
   * @example
   * // Get one UserImage
   * const userImage = await prisma.userImage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserImageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserImageClient<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserImage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserImageFindFirstArgs} args - Arguments to find a UserImage
   * @example
   * // Get one UserImage
   * const userImage = await prisma.userImage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserImageFindFirstArgs>(args?: Prisma.SelectSubset<T, UserImageFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserImageClient<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserImage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserImageFindFirstOrThrowArgs} args - Arguments to find a UserImage
   * @example
   * // Get one UserImage
   * const userImage = await prisma.userImage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserImageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserImageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserImageClient<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserImages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserImageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserImages
   * const userImages = await prisma.userImage.findMany()
   * 
   * // Get first 10 UserImages
   * const userImages = await prisma.userImage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userImageWithIdOnly = await prisma.userImage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserImageFindManyArgs>(args?: Prisma.SelectSubset<T, UserImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserImage.
   * @param {UserImageCreateArgs} args - Arguments to create a UserImage.
   * @example
   * // Create one UserImage
   * const UserImage = await prisma.userImage.create({
   *   data: {
   *     // ... data to create a UserImage
   *   }
   * })
   * 
   */
  create<T extends UserImageCreateArgs>(args: Prisma.SelectSubset<T, UserImageCreateArgs<ExtArgs>>): Prisma.Prisma__UserImageClient<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserImages.
   * @param {UserImageCreateManyArgs} args - Arguments to create many UserImages.
   * @example
   * // Create many UserImages
   * const userImage = await prisma.userImage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserImageCreateManyArgs>(args?: Prisma.SelectSubset<T, UserImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserImages and returns the data saved in the database.
   * @param {UserImageCreateManyAndReturnArgs} args - Arguments to create many UserImages.
   * @example
   * // Create many UserImages
   * const userImage = await prisma.userImage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserImages and only return the `id`
   * const userImageWithIdOnly = await prisma.userImage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserImageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserImage.
   * @param {UserImageDeleteArgs} args - Arguments to delete one UserImage.
   * @example
   * // Delete one UserImage
   * const UserImage = await prisma.userImage.delete({
   *   where: {
   *     // ... filter to delete one UserImage
   *   }
   * })
   * 
   */
  delete<T extends UserImageDeleteArgs>(args: Prisma.SelectSubset<T, UserImageDeleteArgs<ExtArgs>>): Prisma.Prisma__UserImageClient<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserImage.
   * @param {UserImageUpdateArgs} args - Arguments to update one UserImage.
   * @example
   * // Update one UserImage
   * const userImage = await prisma.userImage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserImageUpdateArgs>(args: Prisma.SelectSubset<T, UserImageUpdateArgs<ExtArgs>>): Prisma.Prisma__UserImageClient<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserImages.
   * @param {UserImageDeleteManyArgs} args - Arguments to filter UserImages to delete.
   * @example
   * // Delete a few UserImages
   * const { count } = await prisma.userImage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserImageDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserImageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserImages
   * const userImage = await prisma.userImage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserImageUpdateManyArgs>(args: Prisma.SelectSubset<T, UserImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserImages and returns the data updated in the database.
   * @param {UserImageUpdateManyAndReturnArgs} args - Arguments to update many UserImages.
   * @example
   * // Update many UserImages
   * const userImage = await prisma.userImage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserImages and only return the `id`
   * const userImageWithIdOnly = await prisma.userImage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserImageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserImage.
   * @param {UserImageUpsertArgs} args - Arguments to update or create a UserImage.
   * @example
   * // Update or create a UserImage
   * const userImage = await prisma.userImage.upsert({
   *   create: {
   *     // ... data to create a UserImage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserImage we want to update
   *   }
   * })
   */
  upsert<T extends UserImageUpsertArgs>(args: Prisma.SelectSubset<T, UserImageUpsertArgs<ExtArgs>>): Prisma.Prisma__UserImageClient<runtime.Types.Result.GetResult<Prisma.$UserImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserImageCountArgs} args - Arguments to filter UserImages to count.
   * @example
   * // Count the number of UserImages
   * const count = await prisma.userImage.count({
   *   where: {
   *     // ... the filter for the UserImages we want to count
   *   }
   * })
  **/
  count<T extends UserImageCountArgs>(
    args?: Prisma.Subset<T, UserImageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserImageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserImageAggregateArgs>(args: Prisma.Subset<T, UserImageAggregateArgs>): Prisma.PrismaPromise<GetUserImageAggregateType<T>>

  /**
   * Group by UserImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserImageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserImageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserImageGroupByArgs['orderBy'] }
      : { orderBy?: UserImageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserImage model
 */
readonly fields: UserImageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserImage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserImageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserImage model
 */
export interface UserImageFieldRefs {
  readonly id: Prisma.FieldRef<"UserImage", 'String'>
  readonly altText: Prisma.FieldRef<"UserImage", 'String'>
  readonly objectKey: Prisma.FieldRef<"UserImage", 'String'>
  readonly createdAt: Prisma.FieldRef<"UserImage", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserImage", 'DateTime'>
  readonly userId: Prisma.FieldRef<"UserImage", 'String'>
}
    

// Custom InputTypes
/**
 * UserImage findUnique
 */
export type UserImageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * Filter, which UserImage to fetch.
   */
  where: Prisma.UserImageWhereUniqueInput
}

/**
 * UserImage findUniqueOrThrow
 */
export type UserImageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * Filter, which UserImage to fetch.
   */
  where: Prisma.UserImageWhereUniqueInput
}

/**
 * UserImage findFirst
 */
export type UserImageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * Filter, which UserImage to fetch.
   */
  where?: Prisma.UserImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserImages to fetch.
   */
  orderBy?: Prisma.UserImageOrderByWithRelationInput | Prisma.UserImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserImages.
   */
  cursor?: Prisma.UserImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserImages.
   */
  distinct?: Prisma.UserImageScalarFieldEnum | Prisma.UserImageScalarFieldEnum[]
}

/**
 * UserImage findFirstOrThrow
 */
export type UserImageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * Filter, which UserImage to fetch.
   */
  where?: Prisma.UserImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserImages to fetch.
   */
  orderBy?: Prisma.UserImageOrderByWithRelationInput | Prisma.UserImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserImages.
   */
  cursor?: Prisma.UserImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserImages.
   */
  distinct?: Prisma.UserImageScalarFieldEnum | Prisma.UserImageScalarFieldEnum[]
}

/**
 * UserImage findMany
 */
export type UserImageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * Filter, which UserImages to fetch.
   */
  where?: Prisma.UserImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserImages to fetch.
   */
  orderBy?: Prisma.UserImageOrderByWithRelationInput | Prisma.UserImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserImages.
   */
  cursor?: Prisma.UserImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserImages.
   */
  skip?: number
  distinct?: Prisma.UserImageScalarFieldEnum | Prisma.UserImageScalarFieldEnum[]
}

/**
 * UserImage create
 */
export type UserImageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * The data needed to create a UserImage.
   */
  data: Prisma.XOR<Prisma.UserImageCreateInput, Prisma.UserImageUncheckedCreateInput>
}

/**
 * UserImage createMany
 */
export type UserImageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserImages.
   */
  data: Prisma.UserImageCreateManyInput | Prisma.UserImageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserImage createManyAndReturn
 */
export type UserImageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * The data used to create many UserImages.
   */
  data: Prisma.UserImageCreateManyInput | Prisma.UserImageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserImage update
 */
export type UserImageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * The data needed to update a UserImage.
   */
  data: Prisma.XOR<Prisma.UserImageUpdateInput, Prisma.UserImageUncheckedUpdateInput>
  /**
   * Choose, which UserImage to update.
   */
  where: Prisma.UserImageWhereUniqueInput
}

/**
 * UserImage updateMany
 */
export type UserImageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserImages.
   */
  data: Prisma.XOR<Prisma.UserImageUpdateManyMutationInput, Prisma.UserImageUncheckedUpdateManyInput>
  /**
   * Filter which UserImages to update
   */
  where?: Prisma.UserImageWhereInput
  /**
   * Limit how many UserImages to update.
   */
  limit?: number
}

/**
 * UserImage updateManyAndReturn
 */
export type UserImageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * The data used to update UserImages.
   */
  data: Prisma.XOR<Prisma.UserImageUpdateManyMutationInput, Prisma.UserImageUncheckedUpdateManyInput>
  /**
   * Filter which UserImages to update
   */
  where?: Prisma.UserImageWhereInput
  /**
   * Limit how many UserImages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserImage upsert
 */
export type UserImageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * The filter to search for the UserImage to update in case it exists.
   */
  where: Prisma.UserImageWhereUniqueInput
  /**
   * In case the UserImage found by the `where` argument doesn't exist, create a new UserImage with this data.
   */
  create: Prisma.XOR<Prisma.UserImageCreateInput, Prisma.UserImageUncheckedCreateInput>
  /**
   * In case the UserImage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserImageUpdateInput, Prisma.UserImageUncheckedUpdateInput>
}

/**
 * UserImage delete
 */
export type UserImageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
  /**
   * Filter which UserImage to delete.
   */
  where: Prisma.UserImageWhereUniqueInput
}

/**
 * UserImage deleteMany
 */
export type UserImageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserImages to delete
   */
  where?: Prisma.UserImageWhereInput
  /**
   * Limit how many UserImages to delete.
   */
  limit?: number
}

/**
 * UserImage without action
 */
export type UserImageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserImage
   */
  select?: Prisma.UserImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserImage
   */
  omit?: Prisma.UserImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserImageInclude<ExtArgs> | null
}
