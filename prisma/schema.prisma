generator client {
  provider        = "prisma-client"
  output          = "generated"
  moduleFormat    = "esm"
  previewFeatures = ["typedSql"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id    String @id
  name  String @unique
  users User[]
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  username    String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  connections Connection[]
  passkey     Passkey[]
  password    Password?
  sessions    Session[]
  image       UserImage?
  roles       Role[]       @relation("RoleToUser")
  tenantId    String       @default("(current_setting('app.current_tenant_id'::text))")
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
}

model UserImage {
  id        String   @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash          String
  userId        String  @unique
  requiredReset Boolean @default(false)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String
  backedUp       Boolean
  transports     String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
